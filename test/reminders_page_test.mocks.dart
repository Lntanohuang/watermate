// Mocks generated by Mockito 5.4.5 from annotations
// in watermate/test/reminders_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:watermate/models/custom_timed_reminder.dart' as _i7;
import 'package:watermate/models/reminder_settings.dart' as _i6;
import 'package:watermate/models/timed_reminder.dart' as _i4;
import 'package:watermate/services/reminder_persistence_service.dart' as _i5;
import 'package:watermate/services/reminder_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ReminderService].
///
/// See the documentation for Mockito's code generation for more information.
class MockReminderService extends _i1.Mock implements _i2.ReminderService {
  MockReminderService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void setDailyPlanCompletedChecker(_i3.Future<bool> Function()? checker) =>
      super.noSuchMethod(
        Invocation.method(
          #setDailyPlanCompletedChecker,
          [checker],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setTestMode(bool? isTestMode) => super.noSuchMethod(
        Invocation.method(
          #setTestMode,
          [isTestMode],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void startIntervalReminders(
    int? intervalMinutes, {
    bool? dndTime = true,
    int? reminderStartHour = 10,
    int? reminderStartMinute = 0,
    int? reminderEndHour = 22,
    int? reminderEndMinute = 0,
    bool? dndLunch = true,
    int? lunchStartHour = 12,
    int? lunchStartMinute = 0,
    int? lunchEndHour = 13,
    int? lunchEndMinute = 0,
    bool? dndPlan = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #startIntervalReminders,
          [intervalMinutes],
          {
            #dndTime: dndTime,
            #reminderStartHour: reminderStartHour,
            #reminderStartMinute: reminderStartMinute,
            #reminderEndHour: reminderEndHour,
            #reminderEndMinute: reminderEndMinute,
            #dndLunch: dndLunch,
            #lunchStartHour: lunchStartHour,
            #lunchStartMinute: lunchStartMinute,
            #lunchEndHour: lunchEndHour,
            #lunchEndMinute: lunchEndMinute,
            #dndPlan: dndPlan,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stopIntervalReminders() => super.noSuchMethod(
        Invocation.method(
          #stopIntervalReminders,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> sendTestNotification(
    String? title,
    String? body,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendTestNotification,
          [
            title,
            body,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void scheduleAllTimedReminders(List<_i4.TimedReminder>? reminders) =>
      super.noSuchMethod(
        Invocation.method(
          #scheduleAllTimedReminders,
          [reminders],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> scheduleTimedReminder(_i4.TimedReminder? reminder) =>
      (super.noSuchMethod(
        Invocation.method(
          #scheduleTimedReminder,
          [reminder],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> cancelTimedReminder(_i4.TimedReminder? reminder) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelTimedReminder,
          [reminder],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> cancelAllTimedReminders(
          List<_i4.TimedReminder>? reminders) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelAllTimedReminders,
          [reminders],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ReminderPersistenceService].
///
/// See the documentation for Mockito's code generation for more information.
class MockReminderPersistenceService extends _i1.Mock
    implements _i5.ReminderPersistenceService {
  MockReminderPersistenceService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i6.ReminderSettings?> getReminderSettings() =>
      (super.noSuchMethod(
        Invocation.method(
          #getReminderSettings,
          [],
        ),
        returnValue: _i3.Future<_i6.ReminderSettings?>.value(),
      ) as _i3.Future<_i6.ReminderSettings?>);

  @override
  _i3.Future<bool> saveReminderSettings(_i6.ReminderSettings? settings) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveReminderSettings,
          [settings],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> updateAllReminders(bool? enabled) => (super.noSuchMethod(
        Invocation.method(
          #updateAllReminders,
          [enabled],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> updateIntervalReminder(
    bool? enabled,
    int? interval,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateIntervalReminder,
          [
            enabled,
            interval,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> updateDndTime(bool? enabled) => (super.noSuchMethod(
        Invocation.method(
          #updateDndTime,
          [enabled],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> updateDndLunch(bool? enabled) => (super.noSuchMethod(
        Invocation.method(
          #updateDndLunch,
          [enabled],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> updateDndPlan(bool? enabled) => (super.noSuchMethod(
        Invocation.method(
          #updateDndPlan,
          [enabled],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> updateReminderTimeRange(
    int? startHour,
    int? startMinute,
    int? endHour,
    int? endMinute,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateReminderTimeRange,
          [
            startHour,
            startMinute,
            endHour,
            endMinute,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> updateLunchTimeRange(
    int? startHour,
    int? startMinute,
    int? endHour,
    int? endMinute,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateLunchTimeRange,
          [
            startHour,
            startMinute,
            endHour,
            endMinute,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<List<_i7.CustomTimedReminder>> getCustomReminders() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCustomReminders,
          [],
        ),
        returnValue: _i3.Future<List<_i7.CustomTimedReminder>>.value(
            <_i7.CustomTimedReminder>[]),
      ) as _i3.Future<List<_i7.CustomTimedReminder>>);

  @override
  _i3.Future<List<_i7.CustomTimedReminder>> getEnabledCustomReminders() =>
      (super.noSuchMethod(
        Invocation.method(
          #getEnabledCustomReminders,
          [],
        ),
        returnValue: _i3.Future<List<_i7.CustomTimedReminder>>.value(
            <_i7.CustomTimedReminder>[]),
      ) as _i3.Future<List<_i7.CustomTimedReminder>>);

  @override
  _i3.Future<bool> addCustomReminder(
    int? hour,
    int? minute,
    bool? isAM,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addCustomReminder,
          [
            hour,
            minute,
            isAM,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> deleteCustomReminder(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteCustomReminder,
          [id],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> toggleCustomReminderEnabled(
    int? id,
    bool? enabled,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #toggleCustomReminderEnabled,
          [
            id,
            enabled,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  List<_i4.TimedReminder> convertToTimedReminders(
          List<_i7.CustomTimedReminder>? customReminders) =>
      (super.noSuchMethod(
        Invocation.method(
          #convertToTimedReminders,
          [customReminders],
        ),
        returnValue: <_i4.TimedReminder>[],
      ) as List<_i4.TimedReminder>);

  @override
  _i3.Future<bool> migrateDefaultReminders(
          List<_i4.TimedReminder>? defaultReminders) =>
      (super.noSuchMethod(
        Invocation.method(
          #migrateDefaultReminders,
          [defaultReminders],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
